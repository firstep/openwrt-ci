# For KODLIX GK45

name: OpenWRT-GK45-v1.0

# Controls when the workflow will run
on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  REPO_BRANCH: master
  
permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build_openwrt:
    permissions:
      contents: write # for release creation

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:

#       - name: Checkout
#         uses: actions/checkout@v3
#         with:
#           ref: master
      - name: Checkout
        run: |
          git clone $REPO_URL --branch $REPO_BRANCH $GITHUB_WORKSPACE
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update 
          sudo -E apt-get -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
      - name: Customize
        run: |
          # 添加主题
          #git clone https://github.com/rosywrt/luci-theme-rosy package/openwrt-packages/luci-theme-rosy
          # 修改默认IP
          sed -i 's/192.168.1.1/10.10.10.5/g' package/base-files/files/bin/config_generate
          # 修改版本名称
          sed -i '/R[0-9]\+\.[0-9]\+\.[0-9]\+/s//& for Alvin4u/' package/lean/default-settings/files/zzz-default-settings
          # 禁Ping
          echo "net.ipv4.icmp_echo_ignore_all=1" >> package/base-files/files/etc/sysctl.conf
          # 链接跟踪超限优化
          echo "net.netfilter.nf_conntrack_max=165535" >> package/base-files/files/etc/sysctl.conf
          
      - name: Update feeds
        run: |
          cat >> feeds.conf.default <<EOF
          src-git helloworld https://github.com/fw876/helloworld
          #src-git passwall https://github.com/xiaorouji/openwrt-passwall
          EOF
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          # ================ ttyd 支持ssl(默认用ningx的证书) ================
          sed -i '/^\s*$/d' package/feeds/packages/ttyd/files/ttyd.config
          echo -e '\toption ssl 1' >> package/feeds/packages/ttyd/files/ttyd.config
          echo -e '\toption ssl_cert /etc/nginx/conf.d/_lan.crt' >> package/feeds/packages/ttyd/files/ttyd.config
          echo -e '\toption ssl_key /etc/nginx/conf.d/_lan.key' >> package/feeds/packages/ttyd/files/ttyd.config
          # ================ netdata 支持 ssl(默认用ningx的证书) ================ 
          sed -i '/disable-https/d' package/feeds/packages/netdata/Makefile
          sed -i '/DEPENDS.*$/s//& +libopenssl/' package/feeds/packages/netdata/Makefile
          sed -i '/allow dashboard/a\\tssl certificate = /etc/nginx/conf.d/_lan.crt\n\tssl key = /etc/nginx/conf.d/_lan.key' package/feeds/packages/netdata/files/netdata.conf
          sed -i 's/\"http:\/\/\"/window.location.protocol + \"\/\/\"/' package/feeds/luci/luci-app-netdata/luasrc/view/netdata/netdata.htm
      #- name: Generate configuration file
      #  run: make defconfig
      - name: Customize configure file
        run: |
          rm -f ./.config*
          touch ./.config
          #
          # ========================固件定制部分========================
          # 
          # 
          # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
          # 
          # 以下为定制化固件选项和说明:
          #
          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          # 
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          #
          # 
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          # 
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          # 
          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          EOF
          # 固件压缩:
          cat >> .config <<EOF
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_TARGET_ROOTFS_TARGZ=y
          EOF
          # 编译UEFI固件:
          cat >> .config <<EOF
          CONFIG_EFI_IMAGES=y
          EOF
          # IPv6支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y
          EOF
          # 多文件系统支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-fs-nfs=y
          CONFIG_PACKAGE_kmod-fs-nfs-common=y
          CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          CONFIG_PACKAGE_kmod-fs-ntfs=y
          CONFIG_PACKAGE_kmod-fs-squashfs=y
          EOF
          # USB3.0支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-usb-ohci=y
          CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_kmod-usb2-pci=y
          CONFIG_PACKAGE_kmod-usb3=y
          EOF
          # 默认网卡驱动
          cat >> .config <<EOF
          CONFIG_PACKAGE_kmod-r8168=y
          EOF
          # 常用LuCI插件选择:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-hd-idle=y
          CONFIG_PACKAGE_luci-app-minidlna=y
          CONFIG_PACKAGE_luci-app-openvpn=y
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NaiveProxy=y
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-wireguard=y
          CONFIG_PACKAGE_luci-app-wrtbwmon=y
          CONFIG_PACKAGE_luci-app-syncdial=y
          CONFIG_PACKAGE_luci-app-unblockmusic=y
          CONFIG_PACKAGE_luci-app-unblockmusic_INCLUDE_UnblockNeteaseMusic_Go=y
          CONFIG_PACKAGE_luci-app-vlmcsd=y
          CONFIG_PACKAGE_luci-app-wol=y
          CONFIG_PACKAGE_luci-app-netdata=y
          CONFIG_PACKAGE_luci-app-cifs-mount=y
          CONFIG_PACKAGE_luci-app-upnp=y
          CONFIG_PACKAGE_luci-app-adbyby-plus=m
          CONFIG_PACKAGE_luci-app-pushbot=m
          CONFIG_PACKAGE_luci-app-aliyundrive-webdav=y
          CONFIG_PACKAGE_luci-app-turboacc=y
          CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_SHORTCUT_FE=y
          CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_BBR_CCA=y
          EOF
          # LuCI主题:
          # CONFIG_PACKAGE_luci-theme-rosy=y
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          EOF
          # 常用软件包:
          cat >> .config <<EOF
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_tree=y
          CONFIG_PACKAGE_wget=y
          CONFIG_PACKAGE_iperf3=y
          CONFIG_PACKAGE_nginx-mod-luci=y
          CONFIG_PACKAGE_nginx-ssl=y
          CONFIG_PACKAGE_nginx-ssl-util=y
          EOF
          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_PAD is not set
          # CONFIG_VMDK_IMAGES is not set
          # CONFIG_PACKAGE_luci-app-aria2 is not set
          # CONFIG_PACKAGE_luci-app-baidupcs-web is not set
          # CONFIG_PACKAGE_luci-app-frpc is not set
          # CONFIG_PACKAGE_luci-app-kodexplorer is not set
          # CONFIG_PACKAGE_luci-app-qbittorrent is not set
          # CONFIG_PACKAGE_luci-app-v2ray-server is not set
          # CONFIG_PACKAGE_luci-app-verysync is not set
          # CONFIG_PACKAGE_luci-app-uugamebooster is not set
          # CONFIG_PACKAGE_luci-app-xlnetacc is not set
          # CONFIG_PACKAGE_luci-app-vsftpd is not set
          # CONFIG_PACKAGE_luci-theme-netgear is not set
          # CONFIG_PACKAGE_kmod-r8169 is not set
          # CONFIG_PACKAGE_r8169-firmware is not set
          # CONFIG_PACKAGE_luci-app-unblockmusic_INCLUDE_UnblockNeteaseMusic_NodeJS is not set
          # CONFIG_PACKAGE_luci-app-docker is not set
          # CONFIG_PACKAGE_luci-app-dockerman is not set
          # CONFIG_PACKAGE_luci-app-openvpn is not set
          # CONFIG_PACKAGE_luci-app-ipsec-vpnd is not set
          # CONFIG_PACKAGE_luci-app-jd-dailybonus is not set
          # CONFIG_PACKAGE_luci-app-flowoffload is not set
          EOF
          # 
          # ========================固件定制部分结束========================
          # 
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
          echo "Make config complated..."
          cat ./.config
      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/
  

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
